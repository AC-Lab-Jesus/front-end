---
groups:
- name: front-end-jobs
  jobs:
  - build-front-end
  - build-front-end-test-image
  - deploy-front-end-to-stage
  - execute-front-end-functional-tests
  - deploy-front-end-to-loadtest
  - execute-front-end-load-tests
  - deploy-front-end-to-production
  - execute-load-like-production

- name: init-dynatrace
  jobs: 
  - init-dynatrace-front-end

resource_types:
- name: dynatrace-resource
  type: docker-image
  source:
    repository: mvilliger/dynatrace-resource

resources:

# GitHub Repositories
- name: git-pipeline
  type: git
  source:
    branch: master
    uri: https://github.com/acm-workshop/sockshop.git

- name: git-front-end
  type: git
  source:
    branch: master
    uri: https://github.com/acm-workshop/front-end.git


# - name: dynatrace
#   type: dynatrace-resource
#   source:
#     apitoken: ((apitoken))
#     tenanthost: ((tenanthost))

# Docker Images

- name: front-end-image
  type: docker-image
  source:
    repository: ((docker-hub-username))/front-end
    username: ((docker-hub-username))
    password: ((docker-hub-password))

- name: front-end-test-image
  type: docker-image
  source:
    repository: ((docker-hub-username))/front-end-test
    username: ((docker-hub-username))
    password: ((docker-hub-password))


# PCF Environments

- name: pcf-stage
  type: cf
  source:
    api: ((pcf-stage-api))
    username: ((pcf-stage-deploy-username))
    password: ((pcf-stage-deploy-password))
    organization: ((pcf-stage-organization))
    space: ((pcf-stage-space))
    skip_cert_check: false

- name: pcf-production
  type: cf
  source:
    api: ((pcf-prod-api))
    username: ((pcf-prod-deploy-username))
    password: ((pcf-prod-deploy-password))
    organization: ((pcf-prod-organization))
    space: ((pcf-prod-space))
    skip_cert_check: false

jobs:

# Initialize Dynatrace Custom Device

- name: init-dynatrace-front-end
  public: true
  plan:
  - aggregate:
    - get: git-pipeline
    - get: git-front-end 
  - task: init-dynatrace-task
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/init-dynatrace-task.yml
    params: 
      apitoken: ((apitoken))
      tenanthost: ((tenanthost))
      APP_REPO: git-front-end

# FRONT-END

- name: build-front-end
  serial: true
  public: true
  plan:
  - get: git-front-end
    trigger: false
  - put: front-end-image
    params:
      build: git-front-end
      cache_tag: latest

- name: build-front-end-test-image
  serial: true
  public: true
  plan:
  - get: git-front-end
    trigger: false
  - task: exchange-dockerfile
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: busybox}
      inputs:
      - name: git-front-end
      outputs:
      - name: workspace
      run:
        path: /bin/sh
        args:
        - -exc
        - |
          output_dir=workspace
          rm git-front-end/Dockerfile
          cp git-front-end/test/Dockerfile git-front-end/
          cp -R git-front-end/. "${output_dir}/"
  - put: front-end-test-image
    params:
      build: workspace
      cache_tag: latest

- name: deploy-front-end-to-stage
  serial: true
  public: true
  plan:
  - get: git-front-end
    trigger: true
    passed:
      - build-front-end
  - put: pcf-stage
    params:
      manifest: git-front-end/manifest.yml

- name: execute-front-end-functional-tests
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-front-end
      trigger: true
      passed:
        - deploy-front-end-to-stage
    - get: front-end-test-image
      passed:
        - build-front-end-test-image
  - task: run-functional-tests
    image: front-end-test-image
    config:
      platform: linux
      inputs:
      - name: git-front-end
      run:
        dir: git-front-end
        path: /bin/sh
        args:
        - -exc
        - |
          yarn install
          npm test

- name: deploy-front-end-to-loadtest
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-front-end
      trigger: true
      passed:
        - execute-front-end-functional-tests
  - put: pcf-production
    params:
      manifest: git-front-end/manifest.yml 

- name: execute-front-end-load-tests
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-front-end
      trigger: true
      passed:
        - deploy-front-end-to-loadtest
    - get: front-end-test-image
      passed:
        - build-front-end-test-image
  - task: run-load-tests
    image: front-end-test-image
    config:
      platform: linux
      inputs:
      - name: git-front-end
      run:
        dir: git-front-end
        path: /bin/bash
        args:
        - -exc
        - |
          yarn install
          bash test/e2e/runner.sh

- name: deploy-front-end-to-production
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-front-end
      trigger: true
      passed:
        - execute-front-end-load-tests
  - put: pcf-production
    params:
      manifest: git-front-end/manifest.yml 

- name: execute-load-like-production
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-front-end
      trigger: true
      passed:
        - deploy-front-end-to-production
  - task: run-functional-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: busybox}
      run:
        path: echo
        args: [hello world]

