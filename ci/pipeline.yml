---
groups:
- name: front-end-jobs
  jobs:
  - build-front-end
  - deploy-front-end-to-stage
  - health-check
  - deploy-front-end-to-prod
  - execute-front-end-load-tests
  - deploy-front-end-to-production
  - execute-load-like-production

- name: init-dynatrace
  jobs: 
  - init-dynatrace-front-end

resource_types:
- name: dynatrace-resource
  type: docker-image
  source:
    repository: mvilliger/dynatrace-resource

resources:

- name: git-pipeline
  type: git
  source:
    branch: master
    uri: https://github.com/dynatrace-sockshop/sockshop.git

- name: git-jmeter-as-container
  type: git
  source:
    branch: master
    uri: https://github.com/dynatrace-sockshop/jmeter-as-container.git

- name: git-front-end
  type: git
  source:
    branch: master
    uri: https://github.com/dynatrace-sockshop/front-end.git

- name: dynatrace
  type: dynatrace-resource
  source:
    apitoken: ((apitoken))
    tenanthost: ((tenanthost))

- name: front-end-image
  type: docker-image
  source:
    repository: ((docker-hub-username))/front-end
    username: ((docker-hub-username))
    password: ((docker-hub-password))

# PCF Environments

- name: pcf-stage
  type: cf
  source:
    api: ((pcf-stage-api))
    username: ((pcf-stage-deploy-username))
    password: ((pcf-stage-deploy-password))
    organization: ((pcf-stage-organization))
    space: ((pcf-stage-space))
    skip_cert_check: false

- name: pcf-production
  type: cf
  source:
    api: ((pcf-prod-api))
    username: ((pcf-prod-deploy-username))
    password: ((pcf-prod-deploy-password))
    organization: ((pcf-prod-organization))
    space: ((pcf-prod-space))
    skip_cert_check: false

jobs:

# Initialize Dynatrace Custom Device

- name: init-dynatrace-front-end
  public: true
  plan:
  - aggregate:
    - get: git-pipeline
    - get: git-front-end 
  - task: init-dynatrace-task
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/init-dynatrace-task.yml
    params: 
      apitoken: ((apitoken))
      tenanthost: ((tenanthost))
      APP_REPO: git-front-end

# FRONT-END

- name: build-front-end
  serial: true
  public: true
  plan:
  - get: git-front-end
    trigger: false
  - put: front-end-image
    params:
      build: git-front-end
      cache_tag: latest

- name: deploy-front-end-to-stage
  serial: true
  public: true
  plan:
  - get: git-front-end
    trigger: true
    passed:
      - build-front-end
  - get: git-pipeline
    trigger: false      
  - task: prepare-app-manifest
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/app-manifest-prep.yml
    params:
      PCF_APP_SUFFIX: ((pcf-stage-front-end-suffix)) 
      DOCKER_HUB_ACCOUNT: ((docker-hub-username))
      APP_REPO: git-front-end           
  - put: dynatrace
    params:
      monspecserviceenvironment: front-end/Staging
      pipelinetaskname: deploy-front-end-to-stage
      deployversion: v1.0
      APP_REPO: git-front-end
  - put: pcf-stage
    params:
      manifest: app-manifest-output/manifest.yml

- name: health-check
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-front-end
      trigger: true
      passed:
        - deploy-front-end-to-stage
    - get: git-jmeter-as-container
    - get: git-pipeline
  - task: run-load-tests
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/health-test.yml
    params:
      APP_REPO: git-jmeter-as-container
      FUNC_VALIDATION: yes
      PRODUCTION: false
      SCRIPT_NAME: basiccheck.jmx
      PCF_APP_SUFFIX: ((pcf-stage-front-end-suffix))
      PCF_APP_DOMAIN: ((pcf-prod-app-domain))
      DT_LTN: HealthCheck
      VUCount: 1
      LoopCount: 1

- name: deploy-front-end-to-prod
  serial: true
  public: true
  plan:
  - get: git-front-end
    trigger: true
    passed:
      - health-check
  - get: git-pipeline
    trigger: false      
  - task: get-current-app-color
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/current-app-get-info.yml
    params:
      PCF_APP_SUFFIX: ((pcf-prod-front-end-suffix))
      PCF_API: ((pcf-prod-api))
      PCF_ORG: ((pcf-prod-organization))
      PCF_USER: ((pcf-prod-deploy-username))
      PCF_PWD: ((pcf-prod-deploy-password))
      PCF_SPACE: ((pcf-prod-space))   
  - task: prepare-app-manifest
    file: git-pipeline/deploy/cloud-foundry/ci/tasks/app-manifest-prep.yml
    params:
      PCF_APP_SUFFIX: ((pcf-prod-front-end-suffix)) 
      DOCKER_HUB_ACCOUNT: ((docker-hub-username))
      APP_REPO: git-front-end
      PRODUCTION: true                 
  - put: dynatrace
    params:
      monspecserviceenvironment: front-end/Production
      pipelinetaskname: deploy-front-end-to-prod
      deployversion: v1.0 
      APP_REPO: git-front-end 
  - put: pcf-production
    params:
      manifest: app-manifest-output/manifest.yml 

- name: execute-front-end-load-tests
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-front-end
      trigger: true
      passed:
        - deploy-front-end-to-prod
  - task: run-load-tests
    config:
      platform: linux
      inputs:
      - name: git-front-end
      run:
        dir: git-front-end
        path: /bin/bash
        args:
        - -exc
        - |
          yarn install
          bash test/e2e/runner.sh

- name: deploy-front-end-to-production
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-front-end
      trigger: true
      passed:
        - execute-front-end-load-tests
  - put: pcf-production
    params:
      manifest: git-front-end/manifest.yml 

- name: execute-load-like-production
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-front-end
      trigger: true
      passed:
        - deploy-front-end-to-production
  - task: run-functional-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: busybox}
      run:
        path: echo
        args: [hello world]

